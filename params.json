{"name":"Cljperl","tagline":"CljPerl is a lisp on Perl.","body":"# CljPerl\r\n\r\nCljPerl is a Lisp implemented by Perl. It borrows the idea from Clojure,\r\nwhich makes a seamless connection with Java packages.\r\nLike Java, Perl has huge number of CPAN packages.\r\nThey are amazing resources. We should make use of them as possible.\r\nHowever, programming in Lisp is more insteresting.\r\nCljPerl is a bridge between Lisp and Perl. We can program in Lisp and\r\nmake use of the great resources from CPAN.\r\n\r\n## Key features\r\n\r\n * Seamless connection with Perl.\r\n * Native XML form which could be used to create web page template.\r\n\r\n## Example\r\n\r\n\t;; file t.clp\r\n\t(defmacro defn [name args & body]\r\n\t  `(def ~name\r\n\t     (fn ~args ~@body)))\r\n\t\r\n\t(defn foo [arg]\r\n\t  (println arg))\r\n\t\r\n\t(foo \"hello world!\") ;comment here\r\n\t\r\n\t(foo (+ 1 2))\r\n\t\r\n\t(.CljPerl print \"Hi\\n\")\r\n\t\r\n\t(. print \"Guy\\n\")\r\n\r\n\t(defmulti mf type)\r\n\t(defmethod mf \"string\" [a] (println \"string\"))\r\n\t(defmethod mf \"keyword\" [a] (println \"keyword\"))\r\n\t(mf \"test\")\r\n\t(mf :test)\r\n\r\n\t------------------\r\n\r\n\t> bin/cljp t.clp\r\n\r\n## Install\r\n\r\n\tcpan install CljPerl\r\n\r\n## Lisp <-> Perl\r\n\r\nCljPerl is hosted on Perl. Any object of CljPerl can be passed into Perl and vice versa including code.\r\n\r\nAn example of using Perl's IO functions.\r\n\r\n####### Perl functions in CljPerl.pm\r\n\r\n\tpackage CljPerl;\r\n\t\r\n\tsub open {\r\n\t  my $file = shift;\r\n\t  my $cb = shift;\r\n\t  my $fh;\r\n\t  open $fh, $file;\r\n\t  &{$cb}($fh);\r\n\t  close $fh;\r\n\t}\r\n\t\r\n\tsub puts {\r\n\t  my $fh = shift;\r\n\t  my $str = shift;\r\n\t  print $fh $str;\r\n\t}\r\n\t\r\n\tsub readline {\r\n\t  my $fh = shift;\r\n\t  return <$fh>;\r\n\t}\r\n\t\r\n####### CljPerl functions in core.clp\r\n\r\n\t(ns file\r\n\t  (defn open [file cb]\r\n\t    (. open file cb))\r\n\t\r\n\t  (defn >> [fh str]\r\n\t    (. puts fh str))\r\n\t\r\n\t  (defn << [fh]\r\n\t    (. readline fh)))\r\n\r\n####### Test\r\n\r\n\t(file#open \">t.txt\" (fn [f]\r\n\t  (file#>> f \"aaa\")))\r\n\t\r\n\t(file#open \"<t.txt\" (fn [f]\r\n\t  (println (perl->clj (file#<< f)))))\r\n\r\nAn advanced example which creates a timer with AnyEvent.\r\n\r\n\t(. require AnyEvent)\r\n\r\n\t(def cv (->AnyEvent condvar))\r\n\t\r\n\t(def count 0)\r\n\t\r\n\t(def t (->AnyEvent timer\r\n\t  {:after 1\r\n\t   :interval 1\r\n\t   :cb (fn [ & args]\r\n\t         (println count)\r\n\t         (set! count (+ count 1))\r\n\t         (if (>= count 10)\r\n\t           (set! t nil)))}))\r\n\t\r\n\t(.AnyEvent::CondVar::Base recv cv)\r\n\r\nAnother example which uses AnyEvent::HTTPD to create a http server.\r\n\r\n\t(require anyevent-httpd)\r\n\r\n\t(anyevent-httpd#start-server {:port 9090}\r\n\t  {\"/\"     #[html #[body #[h1 \"Hello World!\"] #[a ^{:href \"/test\"} \"Another test page\"]]]\r\n\t  \"/test\"  #[html #[body #[h1 \"Test page\"] #[a ^{:href \"/\"} \"Back to the main page\"]]]})\r\n\r\n## Documents\r\n\r\nSee APIs.md\r\n\r\n## Quoi\r\n\r\nQuoi is a simple web framework by CljPerl.\r\n\r\n#### APP : app.clj\r\n\r\n\t; load quoi\r\n\t(require quoi)\r\n\r\n\t; load quoi menu utils\r\n\t(require quoi/menu)\r\n\r\n\t; create a menu\r\n\t(def menu (quot#menu\r\n\t  [\"Home\" \"/home$\" \"home.clp\"]\r\n\t  [\"About\" \"/about$\" \"about.clp\"]))\r\n\r\n\t; set the index page.\r\n\t(quoi#page \"/$\"\r\n\t  (fn [S] (read \"index.clp\")))\r\n\r\n\t(quoi#start {:port 9090})\r\n\r\n#### Template : index.clp\r\n\r\n\t#[html\r\n\t  #[body\r\n\t    #[h1 \"hello world\"]\r\n\t    #[p \"url: \" (#::path S)]\r\n\t    #[p \"method: \" (#::method S)]\r\n\t    #[p \"params: \" (clj->string (#::params S))]\r\n\t    #[p \"headers: \" (clj->string (#::headers S))] \r\n\t    menu]]\r\n\r\n#### Run\r\n\r\n\tbin/cljp app.clj\r\n\r\n#### XML selector/translator\r\n\r\n\t($ \"#foo\" #[html \"hello\" #[a ^{:id \"foo\"} \"foo\"]]\r\n\t  (fn [xml]\r\n\t    #[a \"bar\"])) ; <html>hello<span>bar</span></html>\r\n\r\n\t($ \"[id=foo]\" #[html \"hello\" #[a ^{:id \"foo\"} \"foo\"]]\r\n\t  (fn [xml]\r\n\t    #[span \"bar\"])) ; <html>hello<span>bar</bar></html>\r\n\r\n\t\t\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}